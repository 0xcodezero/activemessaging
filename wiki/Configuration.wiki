#summary How to configure a13g

The dials to turn, and switches to flip, to make a13g behave the way you want it:

== broker.yml ==

When you run the processor generator for the first time, a default 'config/broker.yml' is created.  Its purpose is to configure the message broker connection for each environment, much the same as 'database.yml' for ActiveRecord.  Here are the defaults:
{{{
development:
    adapter: stomp
    login: ""
    passcode: ""
    host: localhost
    port: 61613
    reliable: true
    reconnectDelay: 5
}}}

Here's what you can do with these options:
  * 'adapter' - used to select which adapter is used. At the moment, 'stomp' is your only real choice, though some logging and mock adapters will be added soon to aid in testing.
  * 'login' - set a login to use when connecting to the broker.
  * 'passcode' - set a passcode to use when connecting to the broker.
  * 'host' - address of the broker to connect to for both local and remote brokers.
  * 'port' - port of the broker address to connect to, 61613 seems to be Stomp default, certainly is in ActiveMQ's implementation.
  * 'reliable' - 'true' or 'false', controls whether or not the connection should try and reconnect when the broker is or becomes unavailable.  If true, will retry until it connects or is stopped.  Should almost always be 'true', except for unit testing perhaps.
  * 'reconnectDelay' - integer, number of seconds to wait between reconnect attempts, only meaningful when 'reliable' is 'true'.


== messaging.rb ==

The main place for configuring your messaging environment is 'config/messaging.rb', also created when the generator is first run.

Here are the methods available on the 'ActiveMessaging::Gateway' while in the 'define' block.  It bears mentioning that since this is just a ruby block, you can do whatever the language and Rails environment allow to solve your own unique issues.

*queue* ['name', symbol for destination] ['destination', string] ['headers', hash of defaults for send]
    The method is a bit of a misnomer, you use this to define destinations - be they queues or topics or whatever else.  

    'name' should be a symbol, and is the logical name for this destination that will be used in the code.  

    'destination' string is the actual value for the destination that the broker understands.  

    'headers' hash is how you can pass in the default headers that should be applied to each message sent to this destination, can be any pair.  The default includes :persistent => true, even if nothing is specified, in order to make sure messages will be saved by ActiveMQ when sent to a destination.  Other header values mapped to JMS headers are described in the ActiveMQ documentation, http://activemq.apache.org/stomp.html.

*connection_configuration=* ['connection configuration', hash]
    You can use this method to override the configuration loaded for the connection in the 'config/broker.yml'.  All the same hash values can be set, the keys should be set as symbols.  You usually won't need this, but it could be useful for some environments, such as loading configuration from the database, or some other external resource.

*processor_group* ['group name'] ['array of processors']
    A processor group is a way to run the poller to only execute a subset of the processors by passing the name of the group in the poller command line arguments.
    
    You specify the name of the processor as its underscored lowercase version.  So if you have a FooBarProcessor and BarFooProcessor in a processor group, it would look like this:
{{{
    ActiveMessaging::Gateway.define do |s|
      ...
      s.processor_group :my_group, :foo_bar_processor, :bar_foo_processor
    end
}}}
    The processor group is passed into the poller like the following:
{{{
    ./script/poller start -- process-group=my_group
}}}
