= Installing ActiveMq =

ActiveMQ is an open source Java JMS message queue. It supports the Stomp protocol, which !ActiveMessaging uses to send and receive messages. We hope to support more protocols soon, but for the moment ActiveMQ is the transport of choice.

To get a Stomp-talking ActiveMQ on your developer box, try this  
page: [http://www.activemq.org/site/getting-started.html Getting Started with ActiveMQ]

Use a version 4.1 Snapshot release of ActiveMQ to get Stomp support, and the amazing status web page. Otherwise the AM things refused to work for me (Olle).

You can also use the 4.2 Snapshot, just stay away from anything below 4.1 until we hear a report of this working (Andrew).

The version I used was: apache-activemq-4.1-incubator-SNAPSHOT

Edit {{{conf/activemq.xml}}} and add the following connector, the port number 61613 is important:

{{{
<connector>
  <serverTransport uri="stomp://localhost:61613"/>
</connector>
}}}

N.B. that in 4.2, this is already present by default, but make sure it is there in case something changes in future releases.

You don't need to configure your queues/topics ahead of use. ActiveMQ creates queues/topics dynamically, so if you are used to some other more configuration happy JMS provider, don't be put off, there is not a step missing here.

Start ActiveMQ 
{{{
cd activemq
./bin/activemq
}}}

You should see this <INSERT SOME LOG HERE>

If you choose to in have your own config file for activemq (which I suggest), then make a copy of the activemq.xml under the conf directory, like "my-activemq.xml".  Why under conf? The file needs to be on the classpath so activemq can find it, and conf is an obvious place (I actually soft-link my file here from my rails application's conf directory, just to make install simpler and keep everything together.)

Then when starting activemq, specify this file using the following syntax:

Start ActiveMQ 
{{{
cd activemq
./bin/activemq xbean:myamq.xml
}}}



Start messsage consumers with the following command:

{{{
rake activemessaging:start_consumers
}}}

This will start all the Processors in your rails application. If you like, you can open another command prompt and run this command again. This will start more consumers, and the messages will be load balanced across all the running consumers.

Send off some test messages with:

{{{
ruby script/testsend.rb
}}}